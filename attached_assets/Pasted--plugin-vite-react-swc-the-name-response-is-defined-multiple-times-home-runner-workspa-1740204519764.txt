[plugin:vite:react-swc] × the name `response` is defined multiple times
    ╭─[/home/runner/workspace/src/services/recipeApi.ts:19:1]
 16 │       .filter(i => i)
 17 │       .join(',');
 18 │ 
 19 │     const response = await fetch(
    ·           ────┬───
    ·               ╰── previous definition of `response` here
 20 │       `${BASE_URL}/findByIngredients?apiKey=${apiKey}&ingredients=${cleanedIngredients}&number=12&ranking=2&ignorePantry=false`
 21 │     );
 22 │     
 23 │     if (!response.ok) {
 24 │       throw new Error('Failed to fetch recipes');
 25 │     }
 26 │ 
 27 │     const data = await response.json();
 28 │     
 29 │     // Transform Spoonacular data and calculate match percentage
 30 │     const recipes = data.map((item: any) => {
 31 │       const usedIngredientCount = item.usedIngredients.length;
 32 │       const missedIngredientCount = item.missedIngredients.length;
 33 │       const totalIngredients = usedIngredientCount + missedIngredientCount;
 34 │       const matchPercentage = Math.round((usedIngredientCount / totalIngredients) * 100);
 35 │ 
 36 │       return {
 37 │         id: item.id.toString(),
 38 │         name: item.title,
 39 │         image: item.image,
 40 │         cuisine: "Various",
 41 │         difficulty: "medium" as const,
 42 │         duration: 30,
 43 │         ingredients: [
 44 │           ...item.usedIngredients.map((ing: any) => ing.name),
 45 │           ...item.missedIngredients.map((ing: any) => ing.name)
 46 │         ],
 47 │         availableIngredients: item.usedIngredients.map((ing: any) => ing.name),
 48 │         missingIngredients: item.missedIngredients.map((ing: any) => ing.name),
 49 │         matchPercentage,
 50 │         instructions: [],
 51 │         dietary: [],
 52 │         saved: false
 53 │       };
 54 │     });
 55 │ 
 56 │     // Sort recipes by match percentage (highest first)
 57 │     recipes.sort((a, b) => b.matchPercentage - a.matchPercentage);
 58 │ 
 59 │     // Store recipes in Supabase
 60 │     for (const recipe of recipes) {
 61 │       const { data: existingRecipe } = await supabase
 62 │         .from('recipes')
 63 │         .select()
 64 │         .eq('id', recipe.id)
 65 │         .single();
 66 │ 
 67 │       if (!existingRecipe) {
 68 │         await supabase
 69 │           .from('recipes')
 70 │           .insert({
 71 │             id: recipe.id,
 72 │             name: recipe.name,
 73 │             image: recipe.image,
 74 │             cuisine: recipe.cuisine,
 75 │             difficulty: recipe.difficulty,
 76 │             duration: recipe.duration,
 77 │             ingredients: recipe.ingredients,
 78 │             instructions: recipe.instructions,
 79 │             dietary: recipe.dietary
 80 │           });
 81 │       }
 82 │     }
 83 │ 
 84 │     if (!process.env.VITE_SPOONACULAR_API_KEY) {
 85 │     throw new Error('Spoonacular API key is not configured');
 86 │   }
 87 │ 
 88 │   const response = await fetch(
    ·         ────┬───
    ·             ╰── `response` redefined here
 89 │     `https://api.spoonacular.com/recipes/findByIngredients?ingredients=${ingredients}&apiKey=${process.env.VITE_SPOONACULAR_API_KEY}&number=9`
 90 │   );
    ╰────
  × the name `data` is defined multiple times
    ╭─[/home/runner/workspace/src/services/recipeApi.ts:27:1]
 24 │       throw new Error('Failed to fetch recipes');
 25 │     }
 26 │ 
 27 │     const data = await response.json();
    ·           ──┬─
    ·             ╰── previous definition of `data` here
 28 │     
 29 │     // Transform Spoonacular data and calculate match percentage
 30 │     const recipes = data.map((item: any) => {
 31 │       const usedIngredientCount = item.usedIngredients.length;
 32 │       const missedIngredientCount = item.missedIngredients.length;
 33 │       const totalIngredients = usedIngredientCount + missedIngredientCount;
 34 │       const matchPercentage = Math.round((usedIngredientCount / totalIngredients) * 100);
 35 │ 
 36 │       return {
 37 │         id: item.id.toString(),
 38 │         name: item.title,
 39 │         image: item.image,
 40 │         cuisine: "Various",
 41 │         difficulty: "medium" as const,
 42 │         duration: 30,
 43 │         ingredients: [
 44 │           ...item.usedIngredients.map((ing: any) => ing.name),
 45 │           ...item.missedIngredients.map((ing: any) => ing.name)
 46 │         ],
 47 │         availableIngredients: item.usedIngredients.map((ing: any) => ing.name),
 48 │         missingIngredients: item.missedIngredients.map((ing: any) => ing.name),
 49 │         matchPercentage,
 50 │         instructions: [],
 51 │         dietary: [],
 52 │         saved: false
 53 │       };
 54 │     });
 55 │ 
 56 │     // Sort recipes by match percentage (highest first)
 57 │     recipes.sort((a, b) => b.matchPercentage - a.matchPercentage);
 58 │ 
 59 │     // Store recipes in Supabase
 60 │     for (const recipe of recipes) {
 61 │       const { data: existingRecipe } = await supabase
 62 │         .from('recipes')
 63 │         .select()
 64 │         .eq('id', recipe.id)
 65 │         .single();
 66 │ 
 67 │       if (!existingRecipe) {
 68 │         await supabase
 69 │           .from('recipes')
 70 │           .insert({
 71 │             id: recipe.id,
 72 │             name: recipe.name,
 73 │             image: recipe.image,
 74 │             cuisine: recipe.cuisine,
 75 │             difficulty: recipe.difficulty,
 76 │             duration: recipe.duration,
 77 │             ingredients: recipe.ingredients,
 78 │             instructions: recipe.instructions,
 79 │             dietary: recipe.dietary
 80 │           });
 81 │       }
 82 │     }
 83 │ 
 84 │     if (!process.env.VITE_SPOONACULAR_API_KEY) {
 85 │     throw new Error('Spoonacular API key is not configured');
 86 │   }
 87 │ 
 88 │   const response = await fetch(
 89 │     `https://api.spoonacular.com/recipes/findByIngredients?ingredients=${ingredients}&apiKey=${process.env.VITE_SPOONACULAR_API_KEY}&number=9`
 90 │   );
 91 │ 
 92 │   if (!response.ok) {
 93 │     throw new Error('Failed to fetch recipes');
 94 │   }
 95 │ 
 96 │   const data = await response.json();
    ·         ──┬─
    ·           ╰── `data` redefined here
 97 │   return data.map((recipe: any) => ({
 98 │     id: recipe.id.toString(),
 99 │     name: recipe.title,